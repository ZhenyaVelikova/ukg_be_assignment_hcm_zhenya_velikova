// <auto-generated />
using System;
using HCM.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCM.Persistence.Migrations
{
    [DbContext(typeof(HCMDbContext))]
    [Migration("20250419152234_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HCM.Persistence.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18220425-685f-4105-ab7b-7aa8ec50c5df"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "Management"
                        },
                        new
                        {
                            Id = new Guid("efc48980-042d-4e52-98d9-daa6c1deeaa7"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("aa6228b7-3507-42ce-a479-7335d9bb396b"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "Software"
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("PersonType")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("PositionEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportsToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentEntityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PositionEntityId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ReportsToId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79b22586-b339-445e-8c2b-9aa4381f0e01"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            DepartmentId = new Guid("18220425-685f-4105-ab7b-7aa8ec50c5df"),
                            Email = "john.smith@domain.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Smith",
                            PersonType = (byte)0,
                            PositionId = new Guid("adb704cc-ee89-4f34-9b69-8f7a54d80e0d"),
                            StartDate = new DateTime(2023, 5, 18, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            UserId = new Guid("ef81dce2-ff4d-4abf-88a7-6ed24d13e4b6")
                        },
                        new
                        {
                            Id = new Guid("9ee79e7b-7c87-4f84-af10-85f504ad348c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            DepartmentId = new Guid("efc48980-042d-4e52-98d9-daa6c1deeaa7"),
                            Email = "taylor.jones@domain.com",
                            FirstName = "Taylor",
                            IsActive = true,
                            LastName = "Jones",
                            PersonType = (byte)0,
                            PositionId = new Guid("ba3ca0a8-1560-4734-bc7b-7e6c3103d07d"),
                            ReportsToId = new Guid("79b22586-b339-445e-8c2b-9aa4381f0e01"),
                            StartDate = new DateTime(2023, 6, 18, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            UserId = new Guid("4bd3c8c1-b7fd-4f91-a629-71e7182ac88a")
                        },
                        new
                        {
                            Id = new Guid("fe337be1-1e81-4e54-9d0b-a45cd6b09527"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            DepartmentId = new Guid("aa6228b7-3507-42ce-a479-7335d9bb396b"),
                            Email = "stuart.brooks@domain.com",
                            FirstName = "Stuart",
                            IsActive = true,
                            LastName = "Brooks",
                            PersonType = (byte)0,
                            PositionId = new Guid("44461ae7-0441-495d-bd78-1e67b5c9cc43"),
                            ReportsToId = new Guid("79b22586-b339-445e-8c2b-9aa4381f0e01"),
                            StartDate = new DateTime(2023, 7, 18, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            UserId = new Guid("a97a0432-6a4f-4f88-8997-af7cc7f806c2")
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("adb704cc-ee89-4f34-9b69-8f7a54d80e0d"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "CEO"
                        },
                        new
                        {
                            Id = new Guid("ba3ca0a8-1560-4734-bc7b-7e6c3103d07d"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "HR Manager"
                        },
                        new
                        {
                            Id = new Guid("44461ae7-0441-495d-bd78-1e67b5c9cc43"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Name = "Software Engineer"
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8387a601-6341-4787-b779-f4efc2c8f33f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "System Administrator",
                            Name = "SYSTEM_ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3b9a2100-5e8e-4e57-a171-5af606db8b9b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Manager",
                            Name = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("8cabb666-6f24-44ba-89ce-abd55e8782ed"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Employee",
                            Name = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Password = "AFYNtbZhukrYLlPRPf/AZDgPfDwQhqOd1MKeISmNkSP5K2UaHLOUErSl/4iaoWZO4Q==",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("ef81dce2-ff4d-4abf-88a7-6ed24d13e4b6"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Password = "AFYNtbZhukrYLlPRPf/AZDgPfDwQhqOd1MKeISmNkSP5K2UaHLOUErSl/4iaoWZO4Q==",
                            UserName = "john.smith"
                        },
                        new
                        {
                            Id = new Guid("4bd3c8c1-b7fd-4f91-a629-71e7182ac88a"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Password = "AFYNtbZhukrYLlPRPf/AZDgPfDwQhqOd1MKeISmNkSP5K2UaHLOUErSl/4iaoWZO4Q==",
                            UserName = "taylor.jones"
                        },
                        new
                        {
                            Id = new Guid("a97a0432-6a4f-4f88-8997-af7cc7f806c2"),
                            CreatedAt = new DateTime(2025, 4, 17, 7, 22, 31, 21, DateTimeKind.Utc).AddTicks(4505),
                            CreatedById = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            IsActive = true,
                            Password = "AFYNtbZhukrYLlPRPf/AZDgPfDwQhqOd1MKeISmNkSP5K2UaHLOUErSl/4iaoWZO4Q==",
                            UserName = "stuart.brooks"
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7776f64f-8f22-47f9-8560-f24422fe4c03"),
                            RoleId = new Guid("8387a601-6341-4787-b779-f4efc2c8f33f")
                        },
                        new
                        {
                            UserId = new Guid("ef81dce2-ff4d-4abf-88a7-6ed24d13e4b6"),
                            RoleId = new Guid("8387a601-6341-4787-b779-f4efc2c8f33f")
                        },
                        new
                        {
                            UserId = new Guid("4bd3c8c1-b7fd-4f91-a629-71e7182ac88a"),
                            RoleId = new Guid("3b9a2100-5e8e-4e57-a171-5af606db8b9b")
                        },
                        new
                        {
                            UserId = new Guid("a97a0432-6a4f-4f88-8997-af7cc7f806c2"),
                            RoleId = new Guid("8cabb666-6f24-44ba-89ce-abd55e8782ed")
                        });
                });

            modelBuilder.Entity("HCM.Persistence.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PersonEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.DepartmentEntity", null)
                        .WithMany("People")
                        .HasForeignKey("DepartmentEntityId");

                    b.HasOne("HCM.Persistence.Entities.DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HCM.Persistence.Entities.PositionEntity", null)
                        .WithMany("People")
                        .HasForeignKey("PositionEntityId");

                    b.HasOne("HCM.Persistence.Entities.PositionEntity", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.PersonEntity", "ReportsTo")
                        .WithMany("DirectReports")
                        .HasForeignKey("ReportsToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("HCM.Persistence.Entities.PersonEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Position");

                    b.Navigation("ReportsTo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PositionEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.UserEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("HCM.Persistence.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCM.Persistence.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PersonEntity", b =>
                {
                    b.Navigation("DirectReports");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.PositionEntity", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HCM.Persistence.Entities.UserEntity", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
